Import('env')
import scons_tools.dependency.boost
from glob import glob

is_external = not glob("../kernel/") # external if not next to kernel module
if( is_external ):
    print "Note: building npctransport externally to IMP"

scons_tools.dependency.boost.add_boost_library(env, "ProgramOptions",
                                               "program_options",
                                               'boost/program_options.hpp',
                                               extra_boost_libs=["system"])

scons_tools.dependency.boost.add_boost_library( env, "FileSystem", "filesystem",
                                                'boost/filesystem/path.hpp',
                                                body="boost::filesystem::path p;",
                                                extra_boost_libs=["system"])

scons_tools.dependency.add_external_library(env, "ProtoBuf", ["protobuf"],
                                            "google/protobuf/text_format.h")

# Note RMF is an external dependency only in external builds
# TODO: boost_system-mt is system specific, can this be generalized?
if( is_external ):
    scons_tools.dependency.add_external_library(env, "RMF", ["RMF"],
                                            "RMF/FileHandle.h",
                                            extra_libs=["boost_system-mt"])

# See IMP.gsl for an example of how to add external dependencies to a module
req_depend = ['Boost.ProgramOptions',
              'Boost.FileSystem',
              'ProtoBuf']
if( is_external): # RMF is an external dependency only in external builds
    req_depend.append( 'RMF' )
oenv=env.IMPModuleBuild(module="npctransport",
                        version='SVN',
                        required_modules=['kernel', 'algebra', 'container',
                                          'display', 'core', 'atom',
                                          'statistics', 'rmf', 'base', 'RMF'],
                        lib_only_required_modules=['benchmark', 'example'],
                        lib_only_optional_modules=['cgal'],
                        python=True,
                        required_dependencies= req_depend )

if oenv:
    oenv.Append(CPPPATH=[Dir(env['builddir']+"/src")])
    """cat %(tmpdir)s/npctransport.pb.cc | sed "s#data/npctransport.pb.h#IMP/npctransport/internal/proto.hpp#g"> %(targetcc)s"""
    def build_protoc(target, source, env):
        cmd="""mkdir -p %(tmpdir)s;
cp %(source)s %(tmpdir)s
cd %(tmpdir)s; protoc npctransport.proto --cpp_out=%(tmpdir)s --python_out=%(tmpdir)s
mv %(tmpdir)s/npctransport.pb.cc %(targetcc)s
mv %(tmpdir)s/npctransport.pb.h %(targeth)s
mv %(tmpdir)s/npctransport_pb2.py %(targetpy)s
"""%{"tmpdir":Dir(env['builddir']+"/tmp").abspath,
     "targetcc":target[0].path,
     "targeth":target[1].path,
     "targetpy":target[2].path,
     "source":source[0].path}
        env.Execute(cmd)
    oenv['BUILDERS']['Protoc']=Builder(action=build_protoc)
    oenv.Protoc(source=[File(env['builddir']+"/data/npctransport/npctransport.proto")],
               target=[File(env['builddir']+"/src/npctransport.pb.cpp"),
                       File(env['builddir']+"/src/npctransport.pb.h"),
                       File(env['builddir']+"/src/_proto.py")])
