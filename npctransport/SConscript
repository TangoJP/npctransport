Import('env')
import scons_tools.dependency.boost
import scons_tools.data
from glob import glob

scons_tools.dependency.boost.add_boost_library(env, "ProgramOptions",
                                               "program_options",
                                               'boost/program_options.hpp',
                                               extra_boost_libs=["system"])

scons_tools.dependency.boost.add_boost_library( env, "FileSystem", "filesystem",
                                                'boost/filesystem/path.hpp',
                                                body="boost::filesystem::path p;",
                                                extra_boost_libs=["system"])

scons_tools.dependency.add_external_library(env, "ProtoBuf", ["protobuf"],
                                            "google/protobuf/text_format.h")
scons_tools.dependency.add_external_library(env, "AvroCpp", ["avrocpp"],
                                            "avro/Reader.hh")

# See IMP.gsl for an example of how to add external dependencies to a module
req_depend = ['Boost.ProgramOptions',
              'Boost.FileSystem',
              'ProtoBuf']
oenv=env.IMPModuleBuild(module="npctransport",
                        version='SVN',
                        required_modules=['container',
                                          'display', 'core',
                                          'atom',
                                          'statistics', 'rmf',
                                          'RMF',
                                          'benchmark',
                                          'example',
                                          'score_functor',
                                          'kernel',
                                          'algebra',
                                          'base', "benchmark"],
                        lib_only_optional_modules=['cgal'],
                        cpppath=[Dir("#/build/src/npctransport")],
                        required_dependencies= req_depend,
                        optional_dependencies= ["AvroCpp"])

if oenv and oenv["IMP_PASS"]=="BUILD":
    """cat %(tmpdir)s/npctransport.pb.cc | sed "s#data/npctransport.pb.h#IMP/npctransport/internal/proto.hpp#g"> %(targetcc)s"""
    def build_protoc(target, source, env):
        cmd="""mkdir -p %(tmpdir)s;
cp %(source)s %(tmpdir)s
cd %(tmpdir)s; protoc npctransport.proto --cpp_out=%(tmpdir)s --python_out=%(tmpdir)s
mv %(tmpdir)s/npctransport.pb.cc %(targetcc)s
mv %(tmpdir)s/npctransport.pb.h %(targeth)s
mv %(tmpdir)s/npctransport_pb2.py %(targetpy)s
"""%{"tmpdir":Dir("#/build/tmp").abspath,
     "targetcc":target[0].path,
     "targeth":target[1].path,
     "targetpy":target[2].path,
     "source":source[0].path}
        env.Execute(cmd)
    oenv['BUILDERS']['Protoc']=Builder(action=build_protoc)
    protoc=oenv.Protoc(source=[File("#/build/data/npctransport/npctransport.proto")],
                       target=[File("#/build/src/npctransport/npctransport.pb.cpp"),
                               File("#/build/src/npctransport/npctransport.pb.h"),
                               File("#/build/lib/IMP/npctransport/_proto.py")])
    scons_tools.data.get(env).add_to_alias("npctransport", protoc)



    def build_avroc(target, source, env):
      cmd="avrogencpp --include-prefix - --namespace IMP/npctransport/internal -U -i %(source)s -o %(target)s"%{"source":source[0].abspath,
                                                                                                   "target":target[0].abspath
                                                                                                            }
      env.Execute(cmd)
    oenv['BUILDERS']['AvroCPP']=Builder(action=build_protoc)
    protoc=oenv.Protoc(source=[File("#/build/data/npctransport/avrodata.json")],
                       target=[File("#/build/include/IMP/npctransport/internal/avrodata.h")])
    scons_tools.data.get(env).add_to_alias("npctransport", protoc)
