# Autogenerated file, run build/tools/setup_cmake.py to regenerate

if(NOT DEFINED AvroCpp_LIBRARIES)
message(STATUS "Checking for AvroCpp")

include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules(AvroCpp_PKGCONF AvroCpp)

# Include dir
find_path(AvroCpp_INCLUDE_DIR
  NAMES avro/ValidSchema.hh
  PATHS ${AvroCpp_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
find_library(AvroCpp_LIBRARY
  NAMES avrocpp
  PATHS ${AvroCpp_PKGCONF_LIBRARY_DIRS}
)

# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(AvroCpp_PROCESS_INCLUDES AvroCpp_INCLUDE_DIR)
set(AvroCpp_PROCESS_LIBS AvroCpp_LIBRARY)
libfind_process(AvroCpp)

if (${AvroCpp_LIBRARY} MATCHES "AvroCpp_LIBRARY-NOTFOUND"
    OR ${AvroCpp_INCLUDE_DIR} MATCHES "AvroCpp_INCLUDE_DIR-NOTFOUND")
  message(STATUS "AvroCpp not found")
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/AvroCpp" "ok=False")
else()
  message(STATUS "AvroCpp found " ${AvroCpp_INCLUDE_DIR} " " ${AvroCpp_LIBRARY})
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/AvroCpp" "ok=True")
  #set(AVROCPP_LINK_PATH ${AvroCpp_LIBRARY_DIRS} CACHE INTERNAL ""  FORCE)
  set(AVROCPP_INCLUDE_PATH ${AvroCpp_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
  set(AVROCPP_LIBRARIES ${AvroCpp_LIBRARY} CACHE INTERNAL "" FORCE)
endif()

else()
message(STATUS "AvroCpp already setup")

endif(NOT DEFINED AvroCpp_LIBRARIES)