# Autogenerated file, run tools/build/setup_cmake.py to regenerate

if(NOT DEFINED Protobuf_LIBRARIES)

set(CHECK_COMPILES_BODY "")

check_compiles("_environment" Protobuf PROTOBUF "#include <google/protobuf/text_format.h>" "" "protobuf" Protobuf_ok)
if("${Protobuf_ok}" MATCHES "1")
message(STATUS "Found Protobuf in environment")
else()
include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules("Protobuf_PKGCONF" "protobuf")

# Include dir
find_path("Protobuf_INCLUDE_DIR"
  NAMES google/protobuf/text_format.h
  PATHS ${Protobuf_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
foreach(lib protobuf)
find_library("${lib}_LIBRARY"
  NAMES ${lib}
  PATHS ${Protobuf_PKGCONF_LIBRARY_DIRS}
)
set("Protobuf_LIBRARY" ${Protobuf_LIBRARY} ${${lib}_LIBRARY})
endforeach(lib)


# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(Protobuf_PROCESS_INCLUDES Protobuf_INCLUDE_DIR)
set(Protobuf_PROCESS_LIBS Protobuf_LIBRARY)
libfind_process(Protobuf)

if ("${Protobuf_LIBRARY}" MATCHES ".*NOTFOUND.*"
    OR "${Protobuf_INCLUDE_DIR}" MATCHES ".*NOTFOUND.*")
  message("Protobuf not found")
file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/Protobuf" "ok=False")
else()
  check_compiles("_found" "Protobuf" "PROTOBUF" "#include <google/protobuf/text_format.h>" "${Protobuf_INCLUDE_DIR}" "${Protobuf_LIBRARY}" Protobuf_ok_ok)
  if(${Protobuf_ok_ok} MATCHES "1")
    message(STATUS "Found Protobuf at ""${Protobuf_INCLUDE_DIR}" " " "${Protobuf_LIBRARY}")
  else()
    message("Protobuf not found")
file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/Protobuf" "ok=False")
  endif()
endif()
endif()
else()
message(STATUS "Protobuf already setup")

endif(NOT DEFINED Protobuf_LIBRARIES)