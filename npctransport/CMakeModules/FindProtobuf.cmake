# Autogenerated file, run build/tools/setup_cmake.py to regenerate

if(NOT DEFINED Protobuf_LIBRARIES)
message(STATUS "Checking for Protobuf")

include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules(Protobuf_PKGCONF Protobuf)

# Include dir
find_path(Protobuf_INCLUDE_DIR
  NAMES google/protobuf/text_format.h
  PATHS ${Protobuf_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
find_library(Protobuf_LIBRARY
  NAMES protobuf
  PATHS ${Protobuf_PKGCONF_LIBRARY_DIRS}
)

# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(Protobuf_PROCESS_INCLUDES Protobuf_INCLUDE_DIR)
set(Protobuf_PROCESS_LIBS Protobuf_LIBRARY)
libfind_process(Protobuf)

if (${Protobuf_LIBRARY} MATCHES "Protobuf_LIBRARY-NOTFOUND"
    OR ${Protobuf_INCLUDE_DIR} MATCHES "Protobuf_INCLUDE_DIR-NOTFOUND")
  message(STATUS "Protobuf not found")
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/Protobuf" "ok=False")
else()
  message(STATUS "Protobuf found " ${Protobuf_INCLUDE_DIR} " " ${Protobuf_LIBRARY})
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/Protobuf" "ok=True")
  #set(PROTOBUF_LINK_PATH ${Protobuf_LIBRARY_DIRS} CACHE INTERNAL ""  FORCE)
  set(PROTOBUF_INCLUDE_PATH ${Protobuf_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
  set(PROTOBUF_LIBRARIES ${Protobuf_LIBRARY} CACHE INTERNAL "" FORCE)
endif()

else()
message(STATUS "Protobuf already setup")

endif(NOT DEFINED Protobuf_LIBRARIES)