Import('env')
import scons_tools.install
import scons_tools.paths
import os
# Install all files in this directory as data in (by default) /usr/share/imp/example
# Use IMP::example::get_data_path(filename) to get the path for a data file
env.IMPModuleData(env.IMPModuleGetData())
if env["IMP_PASS"]=="BUILD":
  # what ridiculousness scons makes us do
  proto=File(scons_tools.paths.get_input_path(env, "npctransport.proto")).abspath
  path=Dir(scons_tools.paths.get_input_path(env, ".")).abspath
  #print proto, path
  # work around dumb script
  try:
    os.makedirs(Dir("#/build/lib/IMP/npctransport/").abspath)
  except:
    pass
  try:
    os.makedirs(Dir("#/build/src/npctransport").abspath)
  except:
    pass
  proto_files = env.Protoc(
      [],
      proto,
      PROTOCPROTOPATH=[path],
      PROTOCPYTHONOUTDIR=Dir("#/build/lib/IMP/npctransport/").abspath,
      PROTOCOUTDIR = Dir("#/build/src/npctransport/").abspath,
      PROTOCINCLUDE = "IMP/npctransport/npctransport_config.h",
      PROTOCCPPOUTFLAGS = "dllexport_decl=IMPNPCTRANSPORTEXPORT:"
      )
  scons_tools.install.install(env, "#/build/include/IMP/npctransport/internal",
                                 scons_tools.paths.get_build_source_file(env, "npctransport.pb.h",
                                                                         modulename="npctransport"))
  env.Alias("all", proto_files)

  def build_avro(target, source, env):
        cmd="avrogencpp -i %(json)s -o %(header)s -n IMP_npctransport"%{
     "json":source[0].abspath,
     "header":target[0].abspath}
        print "cmd=", cmd
        env.Execute(cmd)
  print "passed avro"
  env['BUILDERS']['AvroCpp']=Builder(action=build_avro)
  env.AvroCpp(source=[scons_tools.paths.get_input_path(env, "AvroDataFileData.json")],
              target=[File("#/build/include/IMP/npctransport/AvroDataFileData.h")])
