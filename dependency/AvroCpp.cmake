
# Autogenerated file, run tools/build/setup_cmake.py to regenerate

if(NOT DEFINED AvroCpp_LIBRARIES)

set(CHECK_COMPILES_BODY "")

check_compiles("_environment" AvroCpp AVROCPP "#include <avro/ValidSchema.hh>" "" "avrocpp" AvroCpp_ok)
if("${AvroCpp_ok}" MATCHES "1")
message(STATUS "Found AvroCpp in environment")
else()
include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules("AvroCpp_PKGCONF" "avrocpp")

# Include dir
find_path("AvroCpp_INCLUDE_DIR"
  NAMES avro/ValidSchema.hh
  PATHS ${AvroCpp_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
foreach(lib avrocpp)
find_library("${lib}_LIBRARY"
  NAMES ${lib}
  PATHS ${AvroCpp_PKGCONF_LIBRARY_DIRS}
)
set("AvroCpp_LIBRARY" ${AvroCpp_LIBRARY} ${${lib}_LIBRARY})
endforeach(lib)


# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(AvroCpp_PROCESS_INCLUDES AvroCpp_INCLUDE_DIR)
set(AvroCpp_PROCESS_LIBS AvroCpp_LIBRARY)
libfind_process(AvroCpp)

if ("${AvroCpp_LIBRARY}" MATCHES ".*NOTFOUND.*"
    OR "${AvroCpp_INCLUDE_DIR}" MATCHES ".*NOTFOUND.*")
  set(AVROCPP_INTERNAL 1 CACHE INTERNAL "" FORCE)
else()
  check_compiles("_found" "AvroCpp" "AVROCPP" "#include <avro/ValidSchema.hh>" "${AvroCpp_INCLUDE_DIR}" "${AvroCpp_LIBRARY}" AvroCpp_ok_ok)
  if(${AvroCpp_ok_ok} MATCHES "1")
    message(STATUS "Found AvroCpp at ""${AvroCpp_INCLUDE_DIR}" " " "${AvroCpp_LIBRARY}")
  else()
    set(AVROCPP_INTERNAL 1 CACHE INTERNAL "" FORCE)
  endif()
endif()
endif()
else()
message(STATUS "AvroCpp already setup")
endif(NOT DEFINED AvroCpp_LIBRARIES)

if(DEFINED AVROCPP_INTERNAL)
message(STATUS "Using internal AvroCPP")
set(AVROCPP_BINARY_DIR ${PROJECT_BINARY_DIR}/src/dependency/AvroCpp CACHE INTERNAL "" FORCE)
add_subdirectory("${PROJECT_SOURCE_DIR}/modules/npctransport/dependency/AvroCpp" "${AVROCPP_BINARY_DIR}")
set(AVROCPP_INCLUDE_PATH "${PROJECT_SOURCE_DIR}/modules/npctransport/dependency/AvroCpp/" CACHE INTERNAL "" FORCE)
set(AVROCPP_LIBRARIES avrocpp CACHE INTERNAL "" FORCE)
file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/AvroCpp" "ok=True
includepath=\"${AVROCPP_INCLUDE_PATH}\"
")
endif(DEFINED AVROCPP_INTERNAL)

